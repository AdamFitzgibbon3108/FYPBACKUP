package com.example.service;

import com.example.model.Question;
import com.example.model.QuestionType;
import com.example.model.SecurityControl;
import com.example.repository.QuestionRepository;
import com.example.repository.SecurityControlRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.*;

@Service
public class QuestionService {

    @Autowired
    private QuestionRepository questionRepository;

    @Autowired
    private SecurityControlRepository securityControlRepository;

    public List<Map<String, Object>> getQuestionsForRole(String role, String difficulty) {
        List<Map<String, Object>> questions = new ArrayList<>();

        // Fetch security-based questions from MySQL database
        List<Question> securityQuestions = questionRepository.findByRoleAndDifficulty(role, difficulty);
        for (Question sq : securityQuestions) {
            Map<String, Object> questionData = new HashMap<>();
            questionData.put("id", sq.getId());
            questionData.put("question", sq.getText());
            questionData.put("questionType", sq.getQuestionType().toString());
            questionData.put("category", sq.getCategory());
            questionData.put("controlCategory", sq.getControlCategory().getName());

            // Handle TRUE_FALSE questions
            if (sq.getQuestionType() == QuestionType.TRUE_FALSE) {
                questionData.put("options", List.of("True", "False"));
            }
            // Handle MULTIPLE_CHOICE questions
            else if (sq.getQuestionType() == QuestionType.MULTIPLE_CHOICE) {
                List<String> options = extractOptions(sq);
                if (!options.isEmpty()) {
                    questionData.put("options", options);
                } else {
                    continue; // Skip questions without answer options
                }
            }
            questions.add(questionData);
        }

        Collections.shuffle(questions);
        return questions;
    }

    // Extracts options from Question entity safely
    private List<String> extractOptions(Question question) {
        List<String> extractedOptions = new ArrayList<>();
        if (question.getQuestionType() == QuestionType.MULTIPLE_CHOICE) {
            // Assuming options are stored as a comma-separated string in the DB
            String optionsStr = question.getCategory(); // Change to the correct field where options are stored
            if (optionsStr != null) {
                extractedOptions = Arrays.asList(optionsStr.split(","));
            }
        }
        return extractedOptions;
    }

    // Get all questions by security control category
    public List<Question> getQuestionsByControlCategory(String categoryName) {
        SecurityControl controlCategory = securityControlRepository.findByName(categoryName);
        if (controlCategory == null) {
            return new ArrayList<>(); // Return empty list if category doesn't exist
        }
        return questionRepository.findByControlCategory(controlCategory);
    }
}




