package com.example.service;

import com.example.model.Response;
import com.example.model.User;
import com.example.model.Question;
import com.example.repository.ResponseRepository;
import com.example.repository.UserRepository;
import com.example.repository.QuestionRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;

@Service
public class ResponseService {

    @Autowired
    private ResponseRepository responseRepository;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private QuestionRepository questionRepository;

    // Method to submit a response and check correctness
    public Response submitResponse(Long questionId, Long userId, String answer) {
        // Retrieve the Question entity
        Question question = questionRepository.findById(questionId)
                .orElseThrow(() -> new IllegalArgumentException("Invalid question ID: " + questionId));

        // Retrieve the User entity
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new IllegalArgumentException("Invalid user ID: " + userId));

        // Check if the answer is correct
        boolean isCorrect = answer.trim().equalsIgnoreCase(question.getCorrectAnswer());
        int score = isCorrect ? question.getScore() : 0;  // âœ… Assign score based on correctness

        // Create and save the response
        Response response = new Response();
        response.setQuestion(question);
        response.setUser(user);
        response.setAnswer(answer);
        response.setScore(score);
        response.setTimestamp(LocalDateTime.now());

        return responseRepository.save(response);
    }

    // Method to save a response directly (if needed)
    public Response saveResponse(Response response) {
        return responseRepository.save(response);
    }
}
